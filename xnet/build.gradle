import org.gradle.util.VersionNumber

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'de.undercouch.download'

boolean withNative = project.hasProperty("native") ? project.getProperty("native").toBoolean() : false
String customNdkVersion = project.hasProperty("customNdkVersion") ? project.getProperty("customNdkVersion") : null
String ossrusername = project.hasProperty("ossrusername") ? project.getProperty("ossrusername") : null
String ossrpassword = project.hasProperty("ossrpassword") ? project.getProperty("ossrpassword") : null
String cmakeFlags = project.hasProperty("cmakeFlags") ? project.getProperty("cmakeFlags") : null
println("withNative:" + withNative)
println("cmakeFlags:" + cmakeFlags)

android {
    compileSdkVersion 29
    if (customNdkVersion != null) {
        ndkVersion customNdkVersion
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29

        if (withNative) {
            externalNativeBuild {
                cmake {
                    // 外部gradlew调用时通过如下命令传入参数
                    // ./gradlew clean :xnet:assembleRelease externalNativeBuildRelease -PcmakeFlags="['-Dxxx', '-Dxxx']"
                    if (cmakeFlags) {
                        arguments.addAll(Eval.me(cmakeFlags))
                        println(arguments)
                    }
                    arguments "-DANDROID_STL=c++_static"
                    targets "xp2p_shared", "xp2p_static"
                }
            }
        }
    }

    buildTypes {
        debug {
            if (withNative && (!cmakeFlags || !cmakeFlags.contains("XP2P_VERSION"))) {
                externalNativeBuild {
                    cmake {
                        cppFlags "-DXP2P_VERSION=android_debug"
                    }
                }
            }
            ndk {
                abiFilters 'arm64-v8a'
            }
        }

        release {
            ndk {
                abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'
            }

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    if (withNative) {
        externalNativeBuild {
            cmake {
                path file('../../../../CMakeLists.txt')
            }
        }
    }
}

task setHttpProxyFromEnv {
    // 加doLast，避免写成配置代码（gradle会执行所有task的配置代码）
    doFirst {
        def map = ['HTTP_PROXY': 'http', 'HTTPS_PROXY': 'https']
        for (e in System.getenv()) {
            def key = e.key.toUpperCase()
            def base = map[key]
            if (base?.value) {
                def url = e.value.toURL()
                println " - systemProp.${base}.proxy=${url.host}:${url.port}"
                System.setProperty("${base}.proxyHost", url.host.toString())
                System.setProperty("${base}.proxyPort", url.port.toString())
            }
        }
    }
}

task downloadZipFile(type: Download) {
    dependsOn setHttpProxyFromEnv
    src 'https://xnet-android-1258344699.cos.ap-nanjing.myqcloud.com/_v1.1.38.1/_v1.1.38.1_so.zip'
    dest new File(buildDir, 'so.zip')
    onlyIfModified true
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into "$rootDir/xnet/src/main/jniLibs"
}

task cleanLocalLibrary(type: Delete) {
    delete "$rootDir/xnet/src/main/jniLibs"
}

if (withNative) {
    preBuild.dependsOn cleanLocalLibrary
} else {
    preBuild.dependsOn downloadAndUnzipFile
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}


File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

group = 'com.qcloud.qvb'
publishing {
    publications {
        release(MavenPublication) {
            groupId group
            artifactId 'xnet'
            version '1.1.38.1'

            artifact androidJavadocsJar
            artifact androidSourcesJar
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            pom {
                name = 'xnet'
                description = 'xnet android sdk'
                url = 'https://github.com/tencentyun/xnet-android-sdk'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/tencentyun/xnet-android-sdk/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'p2p_group'
                        name = 'xp2p group'
                        email = 'xp2p_developer@tencent.com'
                    }
                }
                scm {
                    url = 'scm:git@github.com:tencentyun/xnet-android-sdk.git'
                    connection = 'scm:git@github.com:tencentyun/xnet-android-sdk.git'
                    developerConnection = 'scm:git@github.com:tencentyun/xnet-android-sdk.git'
                }
            }
        }
    }
    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username = ossrusername
                password = ossrpassword
            }
        }
    }
}

signing {
    sign publishing.publications.release
}