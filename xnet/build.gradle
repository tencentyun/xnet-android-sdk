import org.gradle.util.VersionNumber

def gradle6 = VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('6.0.0')
apply plugin: 'com.android.library'
if (!gradle6) {
    apply plugin: 'com.novoda.bintray-release'
}
apply plugin: 'de.undercouch.download'

boolean withNative = project.hasProperty("native") ? project.getProperty("native").toBoolean() : false
String customNdkVersion = project.hasProperty("customNdkVersion") ? project.getProperty("customNdkVersion") : null
android {
    compileSdkVersion 29
    if (customNdkVersion != null) {
        ndkVersion customNdkVersion
    }

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 29

        if (withNative) {
            externalNativeBuild {
                cmake {
                    // 外部gradlew调用时通过如下命令传入参数
                    // ./gradlew clean :xnet:assembleRelease externalNativeBuildRelease -PcmakeFlags="['-Dxxx', '-Dxxx']"
                    if (project.hasProperty("cmakeFlags")) {
                        arguments.addAll(Eval.me(cmakeFlags))
                        println(arguments)
                    }
                    arguments "-DANDROID_STL=gnustl_static", "-DANDROID_PLATFORM=android-9"
                    targets "xp2p_shared", "xp2p_static"
                }
            }
        }
    }

    buildTypes {
        debug {
            ndk {
                abiFilters 'armeabi-v7a'
            }
        }

        release {
            ndk {
                abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'
            }

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    if (withNative) {
        externalNativeBuild {
            cmake {
                path file('../../../../CMakeLists.txt')
            }
        }
    }
}

task setHttpProxyFromEnv {
    def map = ['HTTP_PROXY': 'http', 'HTTPS_PROXY': 'https']
    for (e in System.getenv()) {
        def key = e.key.toUpperCase()
        def base = map[key]
        if (base?.value) {
            def url = e.value.toURL()
            println " - systemProp.${base}.proxy=${url.host}:${url.port}"
            System.setProperty("${base}.proxyHost", url.host.toString())
            System.setProperty("${base}.proxyPort", url.port.toString())
        }
    }
}

task downloadZipFile(type: Download) {
    dependsOn setHttpProxyFromEnv
    src 'https://xnet-android-1255868781.cos.ap-guangzhou.myqcloud.com/so.zip'
    dest new File(buildDir, 'so.zip')
    onlyIfModified true
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into "$rootDir/xnet/src/main/jniLibs"
}

task cleanLocalLibrary(type: Delete) {
    delete "$rootDir/xnet/src/main/jniLibs"
}

if (withNative) {
    preBuild.dependsOn cleanLocalLibrary
} else {
    preBuild.dependsOn downloadAndUnzipFile
}

if (!gradle6) {
    publish {
        repoName = 'xnet-android-sdk'
        userOrg = 'tencentyun'
        groupId = 'com.tencent.qcloud'
        artifactId = 'xnet'
        publishVersion = '0.0.4'
        desc = 'xnet android sdk'
        website = 'https://github.com/tencentyun/xnet-android-sdk'
    }

    bintrayUpload.dependsOn setHttpProxyFromEnv
}